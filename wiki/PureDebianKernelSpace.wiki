#Подготовка Kernel Space.

= Пересборка ядра =

== Выбор инструментария ==

Пара слов об инструментарии. Ядро — это единственная вещь, которую придётся с компилировать и здесь есть несколько вариантов (вариантов нет лишь в одном — это делать всё равно придётся, т.к. старое ядро собрано с CONFIG_SYSFS_DEPRECATED_V2 и новый udev от этого стихами заговорит).

Первый вариант — GPL тулчейн WD. Кросс-компиляция по сравнению с нативной будет выполняться куда быстрее, но инструментарий довольно старый (2009 года) - GCC 4.3, само ядро — 2.6.32.11, а это минимально необходимая версия для работы Debian Wheezy.

Второй вариант — создание своего тулчейна. Вполне посильно, но не пока не хочется провести несколько дней, отлавливая в нём баги. Для понимания процесса можно обратиться к [http://trac.cross-lfs.org/ Cross Linux From Scratch].

Третий вариант — нативная сборка ядра прямо на MBL в системе-прототипе Debian Wheezy c GCC 4.6.3. Сводится к установке пакетов `build-essential uboot-mkimage`, скачиванию понравившегося ядра с www.kernel.org и его сборке.

Я остановился на последнем варианте выбрав самое свежее LTS-ядро [https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.45.tar.xz kernel 3.4.45].


== Процесс загрузки MBL ==

Это важно для понимания того, с помощью какой нечистой силы три составные части — uBoot, kernel, user-space окружение работают вместе.
После включения устройства на сцену выходит загрузчик uBoot, находящийся в распаянной на плате флешки объёмом 512КБ. Я не стану перечислять все его возможности и регалии, с этим можно ознакомиться [http://www.denx.de/wiki/U-Boot здесь]. Загрузчик считывает с первого раздела SATA-диска сценарий загрузки из файла `/boot/boot.scr`. Вы можете заглянуть в него: он представляет собой plain text с несколькими байтами сигнатуры в самом начале, определяющие для uBoot'а тип скрипта и архитектуру текущего устройства. Не пытайтесь его редактировать вручную, для этого есть отдельная утилита. В Debian-подобных системах её можно поставить из пакета `u-boot-tools`. В сценарии прописана считывания [http://omappedia.org/wiki/Device_Tree Device Tree Binary-файла] из `/boot/apollo3g.dtb` и ядра Linux из файла `/boot/uImage`. Выполнив эти действия uBoot распаковывает ядро и запускает его с параметрами загрузки, определёнными в том же `/boot/boot.scr` (можете сравнить его содержимое с [http://mybookworld.wikidot.com/wd-mybook-live-uart логом загрузки]). Далее следует вполне стандартная загрузка ядра с, в том числе, определением места rootfs и запуска init. На этом месте вступает в действие user-space часть — т.е. дальнейшее поведение устройства зависит от того, что вы в качестве дистрибутива на диск установили. Чтобы не затрагивать `/boot/boot.scr` вы можете оставить такую же разбивку диска как и в заводской прошивке: sda1 и sda2 по 2ГБ — части RAID1-массива, образующие rootfs, sda3 в 512МБ — swap, sda4 — всё оставшееся место на диске под пользовательские нужды. Я, собственно, этим путём и пошёл, заводская разбивка диска меня вполне устраивает.


== Компиляция ядра ==

В случае нативной компиляции прямо на недостроенной ~~Звезде Смерти~~ Debian Wheezy я подразумеваю, что вы user-space-часть уже подготовили. Поэтому необходимо «провалиться» в неё и выполнить следующие действия.

{{{
mount -o bind /proc /DataVolume/debinst/proc
mount -o bind /dev /DataVolume/debinst/dev
chroot /DataVolume/debinst
apt-get install build-essential uboot-mkimage ncurses-dev
wget --no-check-certificate https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.4.45.tar.xz
tar -xvf ./linux-3.4.45.tar.xz
cd ./linux-3.4.45
make distclean
make mrproper
make 44x/bluestone_defconfig
make menuconfig
}}}

Дальше вы должны будете выбрать в `menuconfig` необходимые компоненты, например, подддержку RAID, файловых систем ext3, ext4 и прочих необходимых компонентов. Если есть хоть тень сомнения в виборе нужных пунктов, то распакуйте из любого [http://support.wdc.com/download/gpl/ GPL-комплекта] конфиг `packages/kernel_2.6.32-11/arch/powerpc/configs/44x/apollo_3G_nas_defconfig` и работайте с ним. Собираем ядро и Device tree binary:

{{{
make uImage
make bluestone.dtb
}}}

PS Если будете включать в конфиге модуль криптоакселерации в ядрах, отличных от заводского, то вам понадобится [https://github.com/torvalds/linux/pull/33 мой фикс].

Всё! Необходимо лишь перенести три файла в будущую систему в папку /boot.

  * готовое ядро `./arch/powerpc/boot/uImage` в будущую систему под именем `/boot/uImage`
  * имеющийся на MBL скрипт `/boot/boot.scr` в будущую систему в `/boot/boot.scr`
  * Dev tree bin `./arch/powerpc/boot/bluestone.dtb` в будущую систему в `/boot/apollo3g.dtb`